// get-quiz-data.js - Script pour r√©cup√©rer les donn√©es de quiz depuis Supabase
const { createClient } = require('@supabase/supabase-js');
const config = require('./config');

const supabase = createClient(config.supabase.url, config.supabase.key);

// Fonction pour r√©cup√©rer les donn√©es par cat√©gorie
async function getQuizDataByCategory(category, includeDeleted = false) {
  try {
    console.log(`üîç R√©cup√©ration des donn√©es pour la cat√©gorie: ${category}`);
    
    let query = supabase
      .from('quiz_questions')
      .select('*')
      .eq('category', category)
      .order('question_id');
    
    if (!includeDeleted) {
      query = query.eq('deleted', false);
    }
    
    const { data, error } = await query;

    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      throw error;
    }
    
    console.log(`‚úÖ ${data.length} questions trouv√©es pour ${category}`);
    return data;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
    return [];
  }
}

// Fonction pour r√©cup√©rer toutes les donn√©es
async function getAllQuizData(includeDeleted = false) {
  try {
    console.log('üîç R√©cup√©ration de toutes les donn√©es de quiz...');
    
    let query = supabase
      .from('quiz_questions')
      .select('*')
      .order('category', { ascending: true })
      .order('question_id');
    
    if (!includeDeleted) {
      query = query.eq('deleted', false);
    }
    
    const { data, error } = await query;

    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      throw error;
    }
    
    console.log(`‚úÖ ${data.length} questions trouv√©es au total`);
    return data;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
    return [];
  }
}

// Fonction pour afficher les statistiques par cat√©gorie
async function getStatistics() {
  try {
    console.log('üìä Statistiques des donn√©es de quiz');
    console.log('===================================');
    
    const { data, error } = await supabase
      .from('quiz_questions')
      .select('category, question_type')
      .order('category');

    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      return;
    }
    
    // Grouper par cat√©gorie
    const stats = data.reduce((acc, item) => {
      if (!acc[item.category]) {
        acc[item.category] = { total: 0, qcm: 0, input: 0 };
      }
      acc[item.category].total++;
      if (item.question_type === 'qcm') {
        acc[item.category].qcm++;
      } else if (item.question_type === 'input') {
        acc[item.category].input++;
      }
      return acc;
    }, {});
    
    // Afficher les statistiques
    Object.entries(stats).forEach(([category, stat]) => {
      console.log(`\nüìÅ ${category.toUpperCase()}:`);
      console.log(`   Total: ${stat.total} questions`);
      console.log(`   QCM: ${stat.qcm}`);
      console.log(`   Input: ${stat.input}`);
    });
    
    console.log(`\nüìà Total g√©n√©ral: ${data.length} questions`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
  }
}

// Fonction principale
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const category = args[1];
  
  switch (command) {
    case 'category':
      if (!category) {
        console.error('‚ùå Veuillez sp√©cifier une cat√©gorie');
        console.log('Usage: node get-quiz-data.js category <category_name>');
        return;
      }
      const categoryData = await getQuizDataByCategory(category);
      console.log('üìã Donn√©es r√©cup√©r√©es:', categoryData);
      break;
      
    case 'all':
      const allData = await getAllQuizData();
      console.log('üìã Toutes les donn√©es:', allData);
      break;
      
    case 'stats':
      await getStatistics();
      break;
      
    default:
      console.log('üéØ Script de r√©cup√©ration des donn√©es de quiz');
      console.log('============================================');
      console.log('Usage:');
      console.log('  node get-quiz-data.js category <category_name>  - R√©cup√©rer par cat√©gorie');
      console.log('  node get-quiz-data.js all                       - R√©cup√©rer toutes les donn√©es');
      console.log('  node get-quiz-data.js stats                     - Afficher les statistiques');
      console.log('\nCat√©gories disponibles:');
      Object.keys(config.categories).forEach(cat => {
        console.log(`  - ${cat}: ${config.categories[cat].name}`);
      });
      break;
  }
}

// Ex√©cuter le script
main().catch(console.error);
