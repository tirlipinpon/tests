// angular-fallback-data.js - Donn√©es de fallback pour angular.html
function getFallbackQuizData() {
  console.log('‚ö†Ô∏è Utilisation des donn√©es de fallback pour angular');
  return [
  {
    id: "angular-1",
    titre: "1Ô∏è‚É£ R√¥le de l'App Initializer",
    code: "Dans quel cas doit-on utiliser l'App Initializer, et √† quel moment du cycle de vie de l'application s'ex√©cute-t-il ?",
    options: [
      "Pour r√©cup√©rer des configurations avant le d√©marrage de l'application.",
      "Pour g√©rer le routing apr√®s le chargement.",
      "Pour ex√©cuter la d√©tection de changement OnPush."
    ],
    reponse: "Pour r√©cup√©rer des configurations avant le d√©marrage de l'application.",
    type: "qcm",
    explication: "L'App Initializer est utilis√© lorsque vous devez r√©cup√©rer des **configurations** ou effectuer des **setups** avant que l'application ne commence √† s'ex√©cuter. Il est ex√©cut√© avant le chargement de l'App Module ou de l'App Component [1]."
  },
  {
    id: "angular-2",
    titre: "2Ô∏è‚É£ Restriction d'acc√®s (Flag)",
    code: "Quel flag doit-on ajouter √† la configuration du routing pour restreindre l'acc√®s √† une route si l'utilisateur n'est pas authentifi√© ?",
    options: [],
    reponse: "canActivate",
    type: "input",
    explication: "Le flag **`canActivate`** est utilis√© dans le routing pour mapper un service Router Guard qui v√©rifie si l'utilisateur est connect√© et retourne `true` ou `false`, restreignant ainsi l'acc√®s [2], [3]."
  },
  {
    id: "angular-3",
    titre: "3Ô∏è‚É£ Guard pour l'Autorisation",
    code: "Quel type de Guard est sp√©cifiquement utilis√© pour l'impl√©mentation de la gestion des r√¥les (Autorisation) ?",
    options: [
      "CanDeactivate Guard",
      "Resolver Guard",
      "Role-based Guard",
      "CanLoad Guard"
    ],
    reponse: "Role-based Guard",
    type: "qcm",
    explication: "L'autorisation (Role Management) implique de restreindre les pages ou les contr√¥les en fonction du r√¥le sp√©cifique de l'utilisateur. Pour la gestion au niveau des routes, on utilise un **Role-based Guard** [4], [3]."
  },
  {
    id: "angular-4",
    titre: "4Ô∏è‚É£ R√¥le de package-lock.json",
    code: "Quel est le principal objectif du fichier `package-lock.json` ?",
    options: [
      "D√©finir les d√©pendances de production uniquement",
      "Stocker les versions compatibles exactes des d√©pendances",
      "D√©clarer les scripts npm"
    ],
    reponse: "Stocker les versions compatibles exactes des d√©pendances",
    type: "qcm",
    explication: "Le `package-lock.json` stocke les **versions compatibles** exactes des librairies et maintient la structure exacte de l'arbre de d√©pendances pour assurer un environnement de travail stable [4], [5]."
  },
  {
    id: "angular-5",
    titre: "5Ô∏è‚É£ Suppression de package-lock.json",
    code: "Si le fichier `package-lock.json` est supprim√©, quelle est la cons√©quence lors de la prochaine ex√©cution de `npm install` ?",
    options: [
      "L'installation √©choue avec une erreur de d√©pendance",
      "Il cr√©e un nouveau fichier package-lock bas√© sur les versions install√©es",
      "Il utilise uniquement les versions sp√©cifi√©es dans package.json"
    ],
    reponse: "Il cr√©e un nouveau fichier package-lock bas√© sur les versions install√©es",
    type: "qcm",
    explication: "Si ce fichier est manquant, `npm install` s'ex√©cutera et **cr√©era un nouveau fichier** `package-lock.json` bas√© sur les versions qu'il installe au moment pr√©sent [5]."
  },
  {
    id: "angular-6",
    titre: "6Ô∏è‚É£ Input obligatoire",
    code: "Quelle propri√©t√© a √©t√© introduite dans Angular 17 pour rendre un `@Input` obligatoire ?",
    options: [],
    reponse: "required",
    type: "input",
    explication: "Angular 17 a introduit le param√®tre **`required`** sur l'input. Si ce param√®tre n'est pas fourni lors de l'utilisation du composant, cela d√©clenche une erreur [6], [7]."
  },
  {
    id: "angular-7",
    titre: "7Ô∏è‚É£ Installation forc√©e (npm)",
    code: "Quel flag est utilis√© avec `npm install` pour r√©soudre les probl√®mes de compatibilit√© et forcer l'installation des versions compatibles ?",
    options: [],
    reponse: "--force",
    type: "input",
    explication: "Le flag **`--force`** (ou `hyphen Force`) est utilis√© pour forcer l'installation des versions compatibles d'une librairie, √©vitant ainsi les erreurs de d√©pendance [6]."
  },
  {
    id: "angular-8",
    titre: "8Ô∏è‚É£ Outil pour le flux de donn√©es asynchrones",
    code: "Pour la communication de r√©sultats de recherche (Header -> Homepage), BehaviorSubject est pr√©f√©r√© √† Subject. Quelle est la principale raison ?",
    options: [
      "Il est plus performant avec les requ√™tes HTTP",
      "Il permet l'initialisation des valeurs pour les v√©rifications de longueur",
      "Il annule automatiquement les requ√™tes pr√©c√©dentes"
    ],
    reponse: "Il permet l'initialisation des valeurs pour les v√©rifications de longueur",
    type: "qcm",
    explication: "Le **BehaviorSubject** est pr√©f√©r√© car il peut √™tre initialis√© avec une valeur. Cette initialisation permet d'√©viter les erreurs li√©es √† l'ind√©fini (*undefined*) et d'effectuer des v√©rifications initiales (comme la v√©rification de la longueur du tableau) [8]."
  },
  {
    id: "angular-9",
    titre: "9Ô∏è‚É£ Cause des fuites de m√©moire",
    code: "Quelle action sur les Observables provoque des fuites de m√©moire (Memory Leaks) en Angular ?",
    options: [
      "L'utilisation excessive du pipe `async`",
      "L'oubli de se d√©sabonner des souscriptions",
      "L'appel de fonctions asynchrones sans `zone.js`"
    ],
    reponse: "L'oubli de se d√©sabonner des souscriptions",
    type: "qcm",
    explication: "Les fuites de m√©moire surviennent lorsque les **souscriptions aux Observables** (subscriptions) restent actives dans la m√©moire apr√®s la destruction du composant. Il est crucial d'utiliser `ngOnDestroy` (ou `DestroyRef`) pour s'en d√©sabonner [9], [10], [11]."
  },
  {
    id: "angular-10",
    titre: "üîü Optimisation de la D√©tection de Changements",
    code: "Quelle strat√©gie de d√©tection de changements r√©duit les cycles de v√©rification aux changements des `@Input` ?",
    options: [],
    reponse: "OnPush",
    type: "input",
    explication: "L'impl√©mentation de la strat√©gie **`OnPush`** (ChangeDetectionStrategy.OnPush) permet de minimiser les cycles de d√©tection de changements en limitant la v√©rification aux seules entr√©es modifi√©es, optimisant ainsi la performance [12], [13], [11]."
  },
  {
    id: "angular-11",
    titre: "1Ô∏è‚É£1Ô∏è‚É£ Utilisations des Interceptors",
    code: "Outre l'envoi de jetons d'authentification, √† quelles fins les Interceptors HTTP sont-ils utilis√©s ? (Choisir toutes les options valides)",
    options: [
      "Gestion centralis√©e des erreurs API",
      "Simulation de donn√©es (Mocking)",
      "Ajout d'en-t√™tes personnalis√©s",
      "Gestion du Lazy Loading"
    ],
    reponse: [
      "Gestion centralis√©e des erreurs API",
      "Simulation de donn√©es (Mocking)",
      "Ajout d'en-t√™tes personnalis√©s"
    ],
    type: "qcm-multiple",
    explication: "Les Interceptors sont essentiels pour le traitement global des requ√™tes et r√©ponses, incluant l'envoi de `Custom Headers`, la **gestion centralis√©e des erreurs** et la **simulation de donn√©es** (mocking) en lisant des fichiers *asset* [14]."
  },
  {
    id: "angular-12",
    titre: "1Ô∏è‚É£2Ô∏è‚É£ Probl√®me r√©solu par les Signals",
    code: "Quel probl√®me li√© √† la d√©tection de changements les Signals visent-ils √† r√©soudre ou simplifier ?",
    options: [
      "La gestion des fuites de m√©moire",
      "La difficult√© √† refl√©ter les changements d'objets sans appeler `detectChanges()`",
      "L'optimisation des requ√™tes HTTP"
    ],
    reponse: "La difficult√© √† refl√©ter les changements d'objets sans appeler `detectChanges()`",
    type: "qcm",
    explication: "Les Signals ont √©t√© introduits pour simplifier la gestion de l'√©tat r√©actif et r√©duire la n√©cessit√© d'appeler manuellement `changeDetection.detectChanges()` lorsque les objets ou les collections sont mis √† jour, ce qui √©tait une source d'erreurs [12]."
  },
  {
    id: "angular-13",
    titre: "1Ô∏è‚É£3Ô∏è‚É£ `trackBy` dans `*ngFor`",
    code: "Quel est le r√¥le de la fonction `trackBy` dans la directive `*ngFor` ?",
    options: [
      "Am√©liorer la s√©curit√© des boucles",
      "√âviter le rechargement complet du DOM en suivant l'identit√© des √©l√©ments",
      "Permettre le Lazy Loading des √©l√©ments de la liste"
    ],
    reponse: "√âviter le rechargement complet du DOM en suivant l'identit√© des √©l√©ments",
    type: "qcm",
    explication: "`trackBy` optimise le rendu des listes en permettant √† Angular de suivre l'identit√© des √©l√©ments (souvent via un ID unique), garantissant que seuls les √©l√©ments r√©ellement modifi√©s sont re-rendus dans le DOM [15], [10]."
  },
  {
    id: "angular-14",
    titre: "1Ô∏è‚É£4Ô∏è‚É£ R√¥le de @ViewChild",
    code: "Quel est l'objectif du d√©corateur `@ViewChild` ?",
    options: [
      "Passer des donn√©es du parent √† l'enfant",
      "D√©tecter les changements d'un √©l√©ment du DOM",
      "Acc√©der aux m√©thodes ou propri√©t√©s d'un composant enfant ou d'un √©l√©ment du template"
    ],
    reponse: "Acc√©der aux m√©thodes ou propri√©t√©s d'un composant enfant ou d'un √©l√©ment du template",
    type: "qcm",
    explication: "`@ViewChild` est une m√©thode de communication Parent-Enfant qui permet au composant parent d'obtenir une r√©f√©rence √† un composant enfant ou √† un √©l√©ment du template pour interagir avec lui (appeler une fonction, acc√©der √† une variable) [9]."
  },
  {
    id: "angular-15",
    titre: "1Ô∏è‚É£5Ô∏è‚É£ Avantage du Lazy Loading",
    code: "En termes de performance, quel est l'avantage principal du Lazy Loading ?",
    options: [
      "R√©duction de la taille du bundle initial et am√©lioration du temps de chargement",
      "Am√©lioration de la s√©curit√© des routes",
      "Meilleure gestion des √©v√©nements asynchrones"
    ],
    reponse: "R√©duction de la taille du bundle initial et am√©lioration du temps de chargement",
    type: "qcm",
    explication: "Le Lazy Loading est une strat√©gie d'optimisation qui charge les modules ou les composants uniquement lorsqu'ils sont n√©cessaires, ce qui r√©duit le temps de chargement initial et la taille du bundle [3], [13]."
  },
  {
    id: "angular-16",
    titre: "1Ô∏è‚É£6Ô∏è‚É£ Observable vs Promise",
    code: "Quelle est la diff√©rence fondamentale entre un Observable et une Promise concernant la livraison de valeurs ?",
    options: [
      "Les Promises g√®rent les erreurs, pas les Observables",
      "Les Observables √©mettent plusieurs valeurs sur le temps, les Promises une seule",
      "Les Promises sont synchrones, les Observables asynchrones"
    ],
    reponse: "Les Observables √©mettent plusieurs valeurs sur le temps, les Promises une seule",
    type: "qcm",
    explication: "Les Observables sont des flux de donn√©es qui peuvent √©mettre **plusieurs valeurs** dans le temps, repr√©sentant un *stream* d'√©v√©nements, tandis que les Promises ne livrent ou ne rejettent qu'une **seule valeur** [16], [13], [17]."
  },
  {
    id: "angular-17",
    titre: "1Ô∏è‚É£7Ô∏è‚É£ Optimisation de la recherche RxJS",
    code: "Quels op√©rateurs RxJS sont recommand√©s pour optimiser les appels API fr√©quents dans un champ de recherche (annuler les anciennes requ√™tes et √©viter les appels trop rapides) ?",
    options: [
      "map",
      "switchMap",
      "tap",
      "debounceTime"
    ],
    reponse: [
      "switchMap",
      "debounceTime"
    ],
    type: "qcm-multiple",
    explication: "**`debounceTime`** retarde le flux pour √©viter les requ√™tes excessives, et **`switchMap`** annule les requ√™tes HTTP pr√©c√©dentes, garantissant que seule la r√©ponse la plus r√©cente est trait√©e [10]."
  },
  {
    id: "angular-18",
    titre: "1Ô∏è‚É£8Ô∏è‚É£ Combinaison d'Observables",
    code: "Quels op√©rateurs RxJS sont utilis√©s pour ex√©cuter plusieurs appels API ind√©pendants et obtenir un r√©sultat combin√© ?",
    options: [
      "tap",
      "join",
      "combineLatest",
      "mergeMap"
    ],
    reponse: [
      "join",
      "combineLatest",
      "mergeMap"
    ],
    type: "qcm-multiple",
    explication: "Les op√©rateurs **`join`**, **`combineLatest`** et **`mergeMap`** sont utilis√©s pour g√©rer et fusionner les r√©ponses de multiples Observables asynchrones [10]."
  },
  {
    id: "angular-19",
    titre: "1Ô∏è‚É£9Ô∏è‚É£ Usage de `::ng-deep`",
    code: "Dans quels sc√©narios peut-on utiliser le s√©lecteur `::ng-deep` ?",
    options: [
      "Styliser des composants de librairies tierces",
      "Modifier les styles globaux de l'application",
      "Styliser des √©l√©ments r√©sultant d'une projection de contenu"
    ],
    reponse: [
      "Styliser des composants de librairies tierces",
      "Styliser des √©l√©ments r√©sultant d'une projection de contenu"
    ],
    type: "qcm-multiple",
    explication: "Le s√©lecteur `::ng-deep` permet de p√©n√©trer l'encapsulation de vue d'un composant. Il est principalement utilis√© pour modifier le style des composants de **librairies tierces** (third party library) ou du **contenu projet√©** (`content projection`) [18]."
  },
  {
    id: "angular-20",
    titre: "2Ô∏è‚É£0Ô∏è‚É£ Refactoring d'un composant volumineux",
    code: "Quelle est la strat√©gie principale pour refactorer un composant Angular jug√© trop volumineux (\"bloated\") ?",
    options: [
      "Supprimer tous les `@Input` et `@Output`",
      "Diviser le composant en parties r√©utilisables et extraire la logique m√©tier vers un Service",
      "Convertir tous les Observables en Promises"
    ],
    reponse: "Diviser le composant en parties r√©utilisables et extraire la logique m√©tier vers un Service",
    type: "qcm",
    explication: "La strat√©gie principale est de **diviser le composant** en composants enfants r√©utilisables et d'**extraire la logique m√©tier vers un Service**. Cela am√©liore la testabilit√© et maintient la s√©paration des pr√©occupations (UI vs. Logique m√©tier) [19]."
  },
  {
    id: "angular-21",
    titre: "2Ô∏è‚É£1Ô∏è‚É£ D√©bogage de l'√©tat UI",
    code: "Quelle m√©thode simple permet de v√©rifier l'√©tat d'une variable ou d'un Signal dans le template et de confirmer que la D√©tection de Changements s'ex√©cute ?",
    options: [
      "Utiliser un `console.log` dans le constructeur",
      "Afficher l'√©tat dans le template avec le pipe JSON",
      "Utiliser l'outil Angular DevTools uniquement"
    ],
    reponse: "Afficher l'√©tat dans le template avec le pipe JSON",
    type: "qcm",
    explication: "Afficher l'√©tat d'une variable ou d'un Signal dans le template avec le **pipe JSON** (`| json`) est une technique simple pour voir si la valeur est mise √† jour, confirmant ainsi l'ex√©cution de la D√©tection de Changements [20]."
  },
  {
    id: "angular-22",
    titre: "2Ô∏è‚É£2Ô∏è‚É£ R√¥le de TypeScript",
    code: "Quelle est la principale contribution de TypeScript au d√©veloppement Angular ?",
    options: [
      "Fournir le typage statique",
      "Permettre la compilation AOT",
      "G√©rer le DOM de mani√®re r√©active"
    ],
    reponse: "Fournir le typage statique",
    type: "qcm",
    explication: "TypeScript apporte le **typage statique** (static typing) ainsi que des fonctionnalit√©s de programmation orient√©e objet comme les classes et les interfaces, am√©liorant la robustesse du code [21]."
  },
  {
    id: "angular-23",
    titre: "2Ô∏è‚É£3Ô∏è‚É£ Types de Directives",
    code: "Quels sont les deux principaux types de Directives en Angular ?",
    options: [
      "Directives de Module",
      "Directives Structurelles",
      "Directives d'Attribut",
      "Directives de Formulaire"
    ],
    reponse: [
      "Directives Structurelles",
      "Directives d'Attribut"
    ],
    type: "qcm-multiple",
    explication: "Les directives modifient le comportement des √©l√©ments. Elles sont class√©es en deux grandes familles : **Structurelles** (comme `*ngIf`, `*ngFor`) et **d'Attribut** (comme `[ngStyle]`, `[ngClass]`) [22]."
  },
  {
    id: "angular-24",
    titre: "2Ô∏è‚É£4Ô∏è‚É£ Injection de d√©pendance",
    code: "Comment Angular identifie-t-il l'instance correcte √† injecter lors de l'injection de d√©pendance ?",
    options: [
      "Gr√¢ce au nom de la classe",
      "Gr√¢ce au type fourni dans le constructeur",
      "Gr√¢ce au fichier module.ts"
    ],
    reponse: "Gr√¢ce au type fourni dans le constructeur",
    type: "qcm",
    explication: "Angular utilise le **type fourni dans le constructeur** (par exemple : `constructor(service: ServiceName)`) pour identifier et injecter l'instance correcte [23]."
  },
  {
    id: "angular-25",
    titre: "2Ô∏è‚É£5Ô∏è‚É£ Cycle de vie `ngOnInit`",
    code: "√Ä quel moment du cycle de vie Angular le hook `ngOnInit` est-il appel√© ?",
    options: [
      "Avant la cr√©ation du composant",
      "Apr√®s la construction du composant et l'initialisation de ses `@Input`",
      "Juste avant la destruction du composant"
    ],
    reponse: "Apr√®s la construction du composant et l'initialisation de ses `@Input`",
    type: "qcm",
    explication: "Le hook `ngOnInit` est d√©clench√© **apr√®s l'initialisation des propri√©t√©s `@Input`** et est g√©n√©ralement utilis√© pour initialiser les donn√©es du composant [24]."
  },
  {
    id: "angular-26",
    titre: "2Ô∏è‚É£6Ô∏è‚É£ Gestion des formulaires",
    code: "Quels sont les deux types principaux de gestion des formulaires en Angular ?",
    options: [
      "Formulaires dynamiques",
      "Formulaires r√©actifs",
      "Formulaires bas√©s sur les templates",
      "Formulaires observables"
    ],
    reponse: [
      "Formulaires r√©actifs",
      "Formulaires bas√©s sur les templates"
    ],
    type: "qcm-multiple",
    explication: "Angular fournit deux approches : les **formulaires bas√©s sur les templates** (utilisant des directives comme `ngModel`) et les **formulaires r√©actifs** (utilisant `FormControl` et `FormGroup` pour plus de contr√¥le) [25]."
  },
  {
    id: "angular-27",
    titre: "2Ô∏è‚É£7Ô∏è‚É£ Avantage des Modules",
    code: "Quel est l'avantage principal de l'utilisation des Modules (`NgModule`) en Angular ?",
    options: [
      "Am√©liorer la vitesse des Observables",
      "Organiser et regrouper les composants, directives et services",
      "G√©rer l'encapsulation CSS"
    ],
    reponse: "Organiser et regrouper les composants, directives et services",
    type: "qcm",
    explication: "Les **Modules** permettent d'organiser et regrouper logiquement des composants, directives, pipes et services, rendant l'application plus modulaire et maintenable [26]."
  },
  {
    id: "angular-28",
    titre: "2Ô∏è‚É£8Ô∏è‚É£ Compilation AOT",
    code: "Quel est l'objectif principal de la compilation AOT (Ahead-Of-Time) en Angular ?",
    options: [
      "Am√©liorer la performance en compilant le code HTML et TypeScript avant l'ex√©cution",
      "Faciliter le Lazy Loading",
      "√âviter les erreurs de CSS"
    ],
    reponse: "Am√©liorer la performance en compilant le code HTML et TypeScript avant l'ex√©cution",
    type: "qcm",
    explication: "La compilation **AOT** compile le HTML et TypeScript en JavaScript lors du build, ce qui r√©duit le temps de rendu et d√©tecte les erreurs au moment de la compilation [27]."
  },
  {
    id: "angular-29",
    titre: "2Ô∏è‚É£9Ô∏è‚É£ Directive vs Composant",
    code: "Quelle est la principale diff√©rence entre une Directive et un Composant en Angular ?",
    options: [
      "Les composants poss√®dent un template, les directives non",
      "Les directives g√®rent uniquement le DOM, les composants non",
      "Les composants ne peuvent pas utiliser d'inputs"
    ],
    reponse: "Les composants poss√®dent un template, les directives non",
    type: "qcm",
    explication: "La principale diff√©rence est que les **composants poss√®dent un template** associ√©, tandis que les **directives** modifient ou √©tendent le comportement d'√©l√©ments existants sans template [28]."
  },
  {
    id: "angular-30",
    titre: "3Ô∏è‚É£0Ô∏è‚É£ Lazy Loading et Guards",
    code: "Quel Guard est utilis√© pour emp√™cher un module charg√© en Lazy Loading d'√™tre t√©l√©charg√© si la condition n'est pas remplie ?",
    options: [],
    reponse: "canLoad",
    type: "input",
    explication: "Le Guard **`canLoad`** emp√™che le t√©l√©chargement d'un module en Lazy Loading si la condition d√©finie dans le Guard n'est pas remplie [29]."
  },
  {
    id: "angular-31",
    titre: "3Ô∏è‚É£1Ô∏è‚É£ Configuration initiale de l'application",
    code: "Avant le d√©marrage de l'App Module, quel concept utilise-t-on pour r√©cup√©rer des configurations initiales ou effectuer des setups ?",
    options: [],
    reponse: "AppInitializer",
    type: "input",
    explication: "L'**App Initializer** permet d'ex√©cuter un service ou une logique sp√©cifique (comme la r√©cup√©ration de configurations) avant que l'application ne commence √† s'ex√©cuter ou que l'App Module ne se charge."
  },
  {
    id: "angular-32",
    titre: "3Ô∏è‚É£2Ô∏è‚É£ Flag de for√ßage d'installation",
    code: "Quel flag est utilis√© avec la commande `npm install` pour r√©soudre les probl√®mes de compatibilit√© de d√©pendance en for√ßant l'installation des versions compatibles ?",
    options: [],
    reponse: "--force",
    type: "input",
    explication: "Le flag `--force` est utilis√© pour ignorer les probl√®mes de compatibilit√© (dependency issues) et installer de force les versions compatibles d'une librairie."
  },
  {
    id: "angular-33",
    titre: "3Ô∏è‚É£3Ô∏è‚É£ Fichier de D√©tection de Changements par d√©faut",
    code: "Quel fichier JavaScript est int√©gr√© par d√©faut dans Angular pour g√©rer le m√©canisme automatique de la D√©tection de Changements ?",
    options: [],
    reponse: "zone.js",
    type: "input",
    explication: "Le m√©canisme de D√©tection de Changements par d√©faut s'appuie sur le fichier int√©gr√© **`zone.js`** pour savoir quand un changement est survenu dans le TS et le refl√©ter dans le template."
  },
  {
    id: "angular-34",
    titre: "3Ô∏è‚É£4Ô∏è‚É£ Op√©rateur RxJS pour l'annulation de requ√™tes",
    code: "Pour optimiser la recherche API, quel op√©rateur RxJS est utilis√© pour annuler une requ√™te sortante pr√©c√©dente et ne traiter que la r√©ponse la plus r√©cente ?",
    options: [],
    reponse: "switchMap",
    type: "input",
    explication: "L'op√©rateur **`switchMap`** est essentiel pour les sc√©narios de recherche car il g√®re les requ√™tes concurrentes en annulant l'Observable int√©rieur pr√©c√©dent lorsque l'Observable source √©met une nouvelle valeur."
  },
  {
    id: "angular-35",
    titre: "3Ô∏è‚É£5Ô∏è‚É£ Pause de fonction JavaScript",
    code: "Dans une fonction g√©n√©ratrice (generator function) en JavaScript, quel mot-cl√© est utilis√© pour mettre en pause l'ex√©cution et retourner une valeur ?",
    options: [],
    reponse: "yield",
    type: "input",
    explication: "Le mot-cl√© `yield` est utilis√© dans les fonctions g√©n√©ratrices pour suspendre l'ex√©cution de la fonction et retourner une valeur. L'ex√©cution peut √™tre reprise ult√©rieurement."
  },
  {
    id: "angular-36",
    titre: "3Ô∏è‚É£6Ô∏è‚É£ D√©bogage de l'√©tat dans le Template",
    code: "Quel pipe Angular est souvent utilis√© pour d√©boguer l'√©tat d'un objet complexe ou d'un Signal en affichant sa structure directement dans le template ?",
    options: [],
    reponse: "json",
    type: "input",
    explication: "Le pipe **`json`** (`| json`) est utilis√© dans l'interpolation de cha√Æne pour s√©rialiser un objet en cha√Æne JSON, permettant de visualiser son √©tat et de v√©rifier si la D√©tection de Changements s'est bien ex√©cut√©e."
  },
  {
    id: "angular-37",
    titre: "3Ô∏è‚É£7Ô∏è‚É£ S√©lecteur de style encapsul√©",
    code: "Quel s√©lecteur est historiquement utilis√© (et toujours fonctionnel) pour ignorer l'encapsulation de vue et styliser des composants de librairies tierces ?",
    options: [],
    reponse: "::ng-deep",
    type: "input",
    explication: "Le s√©lecteur **`::ng-deep`** permet aux styles de p√©n√©trer l'encapsulation de vue d'un composant. Il est couramment utilis√© pour styliser le contenu projet√© ou les composants de librairies tierces."
  },
  {
    id: "angular-38",
    titre: "3Ô∏è‚É£8Ô∏è‚É£ Lib√©ration de la m√©moire de Closure",
    code: "Afin de lib√©rer la m√©moire retenue par une closure, quelle valeur doit-on assigner √† la r√©f√©rence retenue pour qu'elle soit enlev√©e par le garbage collector ?",
    options: [],
    reponse: "null",
    type: "input",
    explication: "Dans le cas d'une closure, pour lib√©rer la m√©moire qu'elle retient (car elle maintient une r√©f√©rence), il suffit de mettre la r√©f√©rence √† `null` (ou `undefined`) pour que le garbage collector puisse la nettoyer."
  },
  {
    id: "angular-39",
    titre: "3Ô∏è‚É£9Ô∏è‚É£ Outil de manipulation du DOM dans une Directive",
    code: "Quel objet doit √™tre inject√© dans le constructeur d'une directive d'attribut pour obtenir une r√©f√©rence √† l'√©l√©ment h√¥te (Host element) ?",
    options: [],
    reponse: "ElementRef",
    type: "input",
    explication: "**`ElementRef`** est utilis√© pour obtenir une r√©f√©rence native √† l'√©l√©ment DOM sur lequel la directive est appliqu√©e, permettant sa manipulation (souvent en conjonction avec `Renderer2`)."
  },
  {
    id: "angular-40",
    titre: "4Ô∏è‚É£0Ô∏è‚É£ R√©utilisation de Code (SASS)",
    code: "Quel concept SASS est largement recommand√© dans les grands projets pour assurer une r√©utilisation facile des styles, au-del√† des mixins et des fonctions ?",
    options: [
      "CSS Variables",
      "SCSS Components",
      "Inline Styles"
    ],
    reponse: "CSS Variables",
    type: "qcm",
    explication: "L'utilisation des **CSS Variables** est cruciale dans les grands projets pour centraliser et r√©utiliser les styles de mani√®re dynamique et g√©n√©rer facilement des th√®mes personnalis√©s."
  },
  {
    id: "angular-41",
    titre: "4Ô∏è‚É£1Ô∏è‚É£ Strat√©gie de Refactoring",
    code: "Un composant devient trop volumineux ('bloated'). Quelle est la double strat√©gie recommand√©e pour le refactorer ?",
    options: [
      "Extraire la logique m√©tier vers un Service et diviser le composant en parties r√©utilisables.",
      "Convertir le composant en Module et utiliser des `HostListener`.",
      "Utiliser `OnPush` et injecter `ChangeDetectorRef`."
    ],
    reponse: "Extraire la logique m√©tier vers un Service et diviser le composant en parties r√©utilisables.",
    type: "qcm",
    explication: "Lorsqu'un composant est trop volumineux, il faut le **diviser** en composants enfants r√©utilisables, et surtout **extraire la logique m√©tier** (business logic) dans un Service pour am√©liorer la testabilit√© et la s√©paration des pr√©occupations."
  },
  {
    id: "angular-42",
    titre: "4Ô∏è‚É£2Ô∏è‚É£ M√©moire et Fuites d'Observable",
    code: "Si une souscription (Subscription) n'est pas annul√©e (`unsubscribe`), o√π l'objet de la souscription r√©sidera-t-il dans l'environnement d'ex√©cution de l'application ?",
    options: [
      "Dans le DOM",
      "Dans le `localStorage`",
      "Dans la m√©moire de l'application (Application memory)"
    ],
    reponse: "Dans la m√©moire de l'application (Application memory)",
    type: "qcm",
    explication: "L'objet de la souscription restera actif et r√©sidera dans la **m√©moire de l'application** apr√®s la destruction du composant, augmentant la consommation de m√©moire et provoquant des fuites."
  },
  {
    id: "angular-43",
    titre: "4Ô∏è‚É£3Ô∏è‚É£ Utilisation de trackBy",
    code: "Quelle est la principale fonction de `trackBy` dans `*ngFor` ?",
    options: [
      "D√©tecter les erreurs de cl√© de tableau",
      "Suivre l'identit√© des √©l√©ments pour √©viter le rechargement redondant du DOM",
      "Forcer la d√©tection de changements sur chaque √©l√©ment"
    ],
    reponse: "Suivre l'identit√© des √©l√©ments pour √©viter le rechargement redondant du DOM",
    type: "qcm",
    explication: "`trackBy` est utilis√© pour am√©liorer les performances des listes `*ngFor` en permettant √† Angular d'identifier les √©l√©ments qui ont chang√©, ajout√©s ou supprim√©s, re-rendant uniquement les parties n√©cessaires."
  },
  {
    id: "angular-44",
    titre: "4Ô∏è‚É£4Ô∏è‚É£ D√©pendances Senior Recommand√©es",
    code: "Parmi les options suivantes, quelles sont les d√©pendances externes que les d√©veloppeurs exp√©riment√©s consid√®rent comme des 'must' absolus pour la qualit√© du code dans de grands projets ?",
    options: [
      "Husky ou lint-staged",
      "Prettier",
      "Karma",
      "Angular Material ou Tailwind"
    ],
    reponse: [
      "Husky ou lint-staged",
      "Prettier",
      "Angular Material ou Tailwind"
    ],
    type: "qcm-multiple",
    explication: "Prettier est mentionn√© comme un 'must' pour le formatage du code. Husky/lint-staged sont n√©cessaires pour ex√©cuter Prettier sur les commits, et Tailwind/Material sont des choix courants pour les biblioth√®ques UI."
  },
  {
    id: "angular-45",
    titre: "4Ô∏è‚É£5Ô∏è‚É£ Conception de page e-commerce",
    code: "Lors de la d√©composition d'une page e-commerce compl√®te, quels types de composants repr√©sentent g√©n√©ralement l'en-t√™te, le pied de page et le menu de navigation ?",
    options: [
      "Feature Components",
      "Layout Components",
      "Core Components"
    ],
    reponse: "Layout Components",
    type: "qcm",
    explication: "L'en-t√™te, le pied de page et le menu sont souvent consid√©r√©s comme des **Layout Components** (composants de mise en page) car ils d√©finissent la structure globale, par opposition aux 'Feature Components' qui contiennent la logique m√©tier principale (comme le conteneur d'images dans un e-commerce)."
  },
  {
    id: "angular-46",
    titre: "4Ô∏è‚É£6Ô∏è‚É£ Outil de cr√©ation de Tooltip Dynamique",
    code: "En utilisant une Directive personnalis√©e, quels outils Angular peuvent √™tre utilis√©s pour cr√©er dynamiquement des √©l√©ments DOM (comme un tooltip) et ajouter des classes ?",
    options: [
      "NgZone et ChangeDetectorRef",
      "ElementRef et Renderer2",
      "HostListener et ViewChild"
    ],
    reponse: "ElementRef et Renderer2",
    type: "qcm",
    explication: "Pour cr√©er des √©l√©ments dynamiques et modifier des styles dans une directive, on utilise **`ElementRef`** (pour la r√©f√©rence) et **`Renderer2`** (pour la manipulation du DOM de mani√®re abstraite et s√©curis√©e)."
  },
  {
    id: "angular-47",
    titre: "4Ô∏è‚É£7Ô∏è‚É£ D√©bogage de D√©pendances",
    code: "Pour d√©boguer des probl√®mes li√©s √† la mani√®re dont les services sont fournis ou inject√©s, quel outil et quelle fonctionnalit√© sont recommand√©s ?",
    options: [
      "Console du navigateur avec `console.log(this.service)`",
      "Angular Dev Tools pour analyser la hi√©rarchie de l'injecteur",
      "Utiliser `debugger` dans le constructeur"
    ],
    reponse: "Angular Dev Tools pour analyser la hi√©rarchie de l'injecteur",
    type: "qcm",
    explication: "Pour r√©soudre des probl√®mes li√©s √† l'injection de d√©pendances, il est recommand√© d'utiliser les **Angular Dev Tools** pour examiner et analyser la **hi√©rarchie de l'injecteur**."
  },
  {
    id: "angular-48",
    titre: "4Ô∏è‚É£8Ô∏è‚É£ Gestion des Formulaires Dynamiques",
    code: "Lors de la cr√©ation de formulaires complexes et hautement dynamiques (o√π le nombre de champs varie), quelle classe est utilis√©e pour g√©rer l'ajout et la suppression de contr√¥les de formulaire √† la vol√©e ?",
    options: [
      "FormGroup",
      "FormArray",
      "FormControl"
    ],
    reponse: "FormArray",
    type: "qcm",
    explication: "Pour les formulaires o√π les d√©veloppeurs peuvent ajouter des lignes ou des colonnes de champs ('extra rows', 'extra columns'), la classe **`FormArray`** est utilis√©e pour g√©rer un ensemble dynamique de `FormGroup` ou `FormControl`."
  },
  {
    id: "angular-49",
    titre: "4Ô∏è‚É£9Ô∏è‚É£ Gestion des API de Back-end (Type Safety)",
    code: "Pour assurer la coh√©rence des types entre le front-end Angular et le back-end, quelles strat√©gies sont recommand√©es ?",
    options: [
      "Utiliser le fichier `package-lock.json`",
      "Utiliser un outil comme Swagger pour g√©n√©rer des types TypeScript",
      "Utiliser un monorepo avec une interface TypeScript partag√©e",
      "Impl√©menter une strat√©gie de contrat (Contract Testing)"
    ],
    reponse: [
      "Utiliser un outil comme Swagger pour g√©n√©rer des types TypeScript",
      "Utiliser un monorepo avec une interface TypeScript partag√©e",
      "Impl√©menter une strat√©gie de contrat (Contract Testing)"
    ],
    type: "qcm-multiple",
    explication: "Plusieurs strat√©gies assurent la s√©curit√© des types : utiliser Swagger pour la g√©n√©ration automatique de types, impl√©menter un **Contract Testing** (tests automatis√©s contre une interface REST), ou utiliser un **monorepo** pour partager directement les interfaces TypeScript entre le NestJS back-end et l'Angular front-end."
  },
  {
    id: "angular-50",
    titre: "5Ô∏è‚É£0Ô∏è‚É£ Strat√©gie de Caching Hors Ligne",
    code: "Un utilisateur rapporte des √©checs d'appels API en mode hors ligne. Quelle solution de caching est recommand√©e pour g√©rer ces sc√©narios d'application hors ligne ?",
    options: [
      "Stocker les donn√©es dans `sessionStorage`",
      "Utiliser `Indexed DB` ou `Local Storage`",
      "Impl√©menter un Service Worker"
    ],
    reponse: [
      "Utiliser `Indexed DB` ou `Local Storage`",
      "Impl√©menter un Service Worker"
    ],
    type: "qcm-multiple",
    explication: "Pour g√©rer les sc√©narios hors ligne, il faut impl√©menter un m√©canisme de mise en cache (caching mechanism) en utilisant **Indexed DB** ou **Local Storage**, souvent en coordination avec un **Service Worker**."
  }
];
}